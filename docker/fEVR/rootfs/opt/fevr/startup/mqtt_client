#!/usr/bin/python
#    fEVR (frigate Event Video Recorder)
#
#    Copyright (C) 2021-2022  The Bearded Tek (http://www.beardedtek.com) William Kenny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
import sqlite3
from sqlite3 import Error
from paho.mqtt import client as mqtt_client

class logit:
    def __init__(self,logfile="/var/www/logs/debug.log",debug=False):
        self.logfile = logfile
        from os import environ
        self.debug = False
        if environ.get('FEVR_DEBUG', 'false').lower() == "true" or debug == True:
            self.debug = True

    def execute(self,msg,src='fEVR',level='debug',logpath='/var/www/logs'):
        from time import time
        self.logtime = "{:.4f}".format(time())
        self.logfile = f"{logpath}/{level}.log"
        logentry = f"{self.logtime} {str(msg)}"
        with open(self.logfile,"a+") as logFile:
            logFile.write(f"[ {src:15}] {logentry}\n")
        self.to_stderr(f"[ {src:15}] {logentry}")
    def to_stderr(self, *a):
        import sys
        print(*a, file=sys.stderr)

class sqlite:
    def __init__(self,debug=False,db="/var/www/data/db/fEVR.sqlite"):
        self.db = db
        self.script = 'mqtt'
        self.error = logit()
        self.conn = None
        self.version = ""
        self.debug = debug
        self.fatalerror =  f"\n\
        ############################### FATAL ERROR ###############################\n\
        \n\
        ##MESSAGE##\
        \n\
        ###########################################################################"
    def open(self):
        try:
            if self.debug:
                self.error.execute(f"connecting to {self.db}.....\n",src=self.script)
            self.conn = sqlite3.connect(self.db)
        except Error as e:
            if self.debug:
                self.error.execute(e,src=self.script)
    def close(self):
        if self.conn:
            self.conn.commit()
            self.conn.close()
            self.error.execute('SQL Connection Closed',src=self.script)
    def execute(self,sql):
        retval = []
        e = ""
        try:
            self.open()
            exe = self.conn.execute(sql)
            if self.debug:
                self.error.execute(f"Executed SQL: {sql}",src=self.script)
            retval = [0,sql,exe]
        except Error as e:
            retval = [1,sql,str(e).split(":")]
        finally:
            self.close()
            self.error.execute(retval,src=self.script)
            return retval
    def count(self,sql):
        e = ""
        try:
            exe = self.conn.execute(sql)
            cnt = exe.fetchone()
            return cnt[0]
        except Error as e:
            return f"ERROR: {str(e).split(':')}"
        finally:
            self.close()

    def retrieve(self,sql,count=0):
        try:
            cursor = self.conn.cursor()
            try:
                cursor.execute(sql)
                records = cursor.fetchall()
                cursor.close
                return records
            except:
                self.error.execute(f"No results returned from {self.db}", self.script)
                return []
        except:
            msg =f"Permissions improperly set on {self.db}"
            try:
                import subprocess
                data = subprocess.check_output("/opt/fevr/setup/dbsetperms '/var/www/data/db'", shell=True)
                self.error.exeture(data,self.script)
            except:
                from os import environ
                imgName=environ.get('FEVR_CONTAINER_NAME',"fevr")
                msg += f"\n Cannot automatically set permissions. Please run the following command on your host:\n\
                         docker exec -it {imgName} chown -R 100:101 /var/www/data && chmod -R 0770 /var/www/data"
            finally:
                errmsg = self.fatalerror.replace("##MESSAGE##",msg)

            self.error.execute(errmsg, self.script)
        
class fevrMQTT:
    def __init__(self,):
        from random import randint
        import socket
        self.script = 'mqtt_client'
        self.error = logit(debug=True)
        hostname = socket.gethostname()
        self.clientID = f"fevr-{hostname}-{randint(0,100)}"
        self.getEnvVars()
        self.run()

    def getEnvVars(self):
        from os import getenv
        def noneCheck(var,default):
            if var == None:
                var = default
            return var 
        self.broker = noneCheck(getenv('MQTT_BROKER_URL'),'192.168.2.245')
        self.port = noneCheck(getenv('MQTT_BROKER_PORT'),'1883')
        self.username = noneCheck(getenv('MQTT_USER'),'')
        self.password = noneCheck(getenv('MQTT_PASS'),'')
        topics = noneCheck(getenv('MQTT_TOPICS'),'frigate/+')
        self.topics = []
        topics = topics.split(',',5)
        count=0
        for topic in topics:
            if 4 >= count:
                self.topics.append(topic)
            else:
                self.error.execute(f"Topic Limit Exceeded\nTopics Included: {self.topics}",src=self.script)

    def connect_mqtt(self) -> mqtt_client:
        def on_connect(client, userdata, flags, rc):
            if rc == 0:
                self.error.execute(f"Connected to {self.broker}:{self.port} as {self.clientID}",src=self.script)
                self.error.execute(f"Subscribed to:{self.topics}".replace('[','\t').replace(']','').replace(', ','\t').replace("'",""),src=self.script)
            else:
                self.error.execute("Failed to connect, return code %d", rc,src=self.script)
        client = mqtt_client.Client(self.clientID)
        if self.username and self.password:
            client.username_pw_set(self.username, self.password)
        client.on_connect = on_connect
        client.connect(self.broker, self.port)
        return client
    
    def processMsg(self,msg,topic):
        from json import loads, dumps
        if topic == 'frigate/available':
            self.error.execute('frigate is online',src=self.script)
        if 'stats' in topic:
            msg = loads(msg)
            for key in msg:
                if key == 'backyard' or key == 'driveway':
                    self.error.execute(f"{key}:",src=self.script)
                    self.error.execute(f"\tCamera FPS: {msg[key]['camera_fps']}",src=self.script)
                    self.error.execute(f"\tDetection FPS: {msg[key]['detection_fps']}",src=self.script)
                    self.error.execute(f"\tProcess FPS: {msg[key]['process_fps']}",src=self.script)
                    self.error.execute(f"\tSkipped FPS: {msg[key]['skipped_fps']}",src=self.script)
                if key == 'detectors':
                    for detector in msg[key]:
                        for d in msg[key][detector]:
                            self.error.execute(f"{detector}:",src=self.script)
                            self.error.execute(f"\t{d}: {msg[key][detector][d]}:",src=self.script)
                if key == 'service':
                    from math import floor
                    self.error.execute('Frigate Information:',src=self.script)
                    self.error.execute(f"\tVersion: {msg[key]['version']}",src=self.script)
                    uptime = msg[key]['uptime']
                    uptimeM = floor(uptime/60)
                    uptimeS = uptime - (uptimeM*60)
                    uptimeH=floor(uptimeM/60)
                    uptimeM = floor(uptimeM - (uptimeH*60))
                    uptimeD=floor(uptimeH/24)
                    uptimeH = floor(uptimeH - (uptimeD*24))

                    if 1 > uptimeD:
                        uptimeD = 0
                    uptimeStr = f"Uptime: {uptimeD} days, {uptimeH} hours, {uptimeM} minutes and {uptimeS} seconds."
                    self.error.execute(f"\t{uptimeStr}",src=self.script)
        if 'event' in topic:
            from json import loads
            from math import floor
            event = loads(msg)
            type = event['type']
            after = event['after']
            if type == 'end':
                type = after['label']
                score = after['score']
                camera = after['camera']
                event_id = after['id']
                event_time = event_id[:-7]
                import time
                timeformat = "%-m/%-d/%y %H:%M:%S"
                #datetime = time.strftime(timeformat,time.localtime(floor(int(event_time))))
                self.error.execute(f"[ {event_time} ] {event_id}:{type}({score}) detected in {camera}.",src=self.script)
                sql = f"""INSERT INTO events ('event','camera','type','score','time') VALUES('{event_id}','{camera}','{type}','{score}','{event_time}');"""
                msql = sqlite()
                self.error.execute(f"[ {time.strftime(timeformat,time.localtime())} ] {msql.execute(sql)}",src=self.script)
                self.error.execute(msql.execute(sql),src=self.script)

    def subscribe(self, client: mqtt_client):
        def on_message(client, userdata, msg):
            ## This is where our code goes to do what we want when a message is received
            self.processMsg(msg.payload.decode(),msg.topic)
        for topic in self.topics:
            client.subscribe(topic)
        client.on_message = on_message

    def run(self):
        self.client = self.connect_mqtt()
        self.subscribe(self.client)
        self.client.loop_forever()

if __name__ == '__main__':
    fevrMQTT()
