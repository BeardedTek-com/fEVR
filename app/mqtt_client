#!/usr/bin/env python
#    This code is a portion of frigate Event Video Recorder (fEVR)
#
#    Copyright (C) 2021-2022  The Bearded Tek (http://www.beardedtek.com) William Kenny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU AfferoGeneral Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

from paho.mqtt import client as mqtt_client
import argparse
from os import getenv, environ, path, access, R_OK
from time import time
from json import loads, dumps
from math import floor
from random import randint
import socket
import requests
from math import floor
import socket
import json
import yaml
import sys

class ntfy:
    def __init__(self):
        self.server = "https://ntfy.fevr.video"
        self.payload = {
                    "topic": "",
                    "message": "",
                    "title": "",
                    "tags": [],
                    "priority": 4,
                    "attach": "",
                    "filename": "",
                    "click": "",
                    "actions": []
        }
        
    def notify(self):
        requests.post(self.server,data=json.dumps(self.payload))

class logit:
    def execute(msg,src='fEVR',debug=True):
        def to_stderr(*a):
            print(*a, file=sys.stderr)
        logtime = "{:.2f}".format(time())
        logentry = f"{logtime} {str(msg)}"
        if debug:
            to_stderr(f"[ {src:16} ] {logentry}")

class getLocalIP:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    addr = s.getsockname()[0]

class auth:
    def __init__(self,transport="http://",fevr="localhost:5090",rSession=requests.Session(),apikey=""):
        self.transport = transport
        self.fevr = fevr
        self.rSession = rSession
        self.apikey = apikey

    def api(self):
        source = "MQTT | AUTH"
        # Construct the json for the post request
        JsonPost = {'key':self.apikey,'ip':getLocalIP.addr}
        # Send the post using our session
        fevrUrl = f"{self.transport}{self.fevr}/apiAuth"
        apiAuth = self.rSession.post(f"{fevrUrl}", json=JsonPost)
        apiAuthJSON = json.loads(apiAuth.content)
        authResult = True if apiAuthJSON['auth'] else False
        logit.execute(f"{fevrUrl} {authResult}: {apiAuthJSON['authIP']} name: {apiAuthJSON['name']}",src=source)
        return authResult
    
class fevrMQTT:
    def __init__(self):
        source = "MQTT | DEFAULTS"
        hostname = socket.gethostname()
        self.clientID = f"fevr-{hostname}-{randint(0,100)}"
        # Initialize our Config variable as a dict and set sane default values in self.config
        self.config =  {
                            'fevr':"localhost:5090",
                            'mqtt_broker':"mqtt",
                            'mqtt_port':1883,
                            'mqtt_user':'',
                            'mqtt_password':'',
                            'mqtt_apikey': '',
                            'verbose': False,
                            'fevr_transport': 'http://',
                            'mqtt_topics': "frigate/+"
                        }
        logit.execute(self.config,src=source)
        # Get the Command Line Arguments in a dict
        self.Args = self.cla()
        # If using the -c/--config option, get the config from the specified file
        if self.Args['config']:
            self.configFile = self.getConfig(self.Args['config'])
            if self.configFile['fevr_host'] and self.configFile['fevr_port']:
                self.configFile["fevr"] = f"{self.configFile['fevr_host']}:{self.configFile['fevr_port']}"
        self.setup()
        self.run()
        
    def getConfig(self,config):
        source = "MQTT | CONFIG"
        if path.isfile(config) and access(config, R_OK):
            with open(config) as configFile:
                try:
                    Config = yaml.safe_load(configFile)
                except Exception as e:
                    logit.execute(f"ERROR: {e}",src=source)
                    Config = {}
                values = ['fevr_host','fevr_port','fevr_transport','mqtt_apikey','mqtt_broker','mqtt_port','mqtt_user','mqtt_password','mqtt_topics','verbose','ntfy_server','ntfy_topic']
                for value in values:
                    try:
                        # Check if value exists
                        test = Config[value]
                    except KeyError:
                        # If not, set it to None
                        Config[value] = None
            Config["error"] = None
        else:
            if path.isfile(config):
                Config["error"] = "File not readable"
            Config["error"] = "File does not exist"
        return Config
    
    
    def cla(self):
        source = "MQTT | CMDLINE"
        parser = argparse.ArgumentParser()
        parser.add_argument('-c','--config',type=str,required=False,help="If set, uses command line options instead of the database (default: empty)")
        parser.add_argument('-m','--mqtt_broker',type=str,required=False,help="MQTT Broker IP/FQDN (default: mqtt)")
        parser.add_argument('-k','--mqtt_apikey',type=str,required=False,help="fEVR API Key (default: blank string)")
        parser.add_argument('-p','--mqtt_port',type=int,required=False,help="MQTT Port (default: 1883)")
        parser.add_argument('-t','--mqtt_topics',type=str,required=False,help="MQTT Topics (default: 'frigate/+')")
        parser.add_argument('-u','--mqtt_user',type=str,required=False,help="MQTT Username (default: '')")
        parser.add_argument('-P','--mqtt_password',type=str,required=False,help="MQTT Password (default: '')")
        parser.add_argument('-f','--fevr',type=str,required=False,help="fEVR IP Address/FQDN (default: '127.0.0.1:5090)")
        parser.add_argument('-s','--fevr_transport',action='store_true',required=False,help="If set uses https:// for fEVR API Calls (default: False)")
        parser.add_argument('-v','--verbose',action='store_true',required=False,help="If set, outputs verbosely to stdout")
        args = parser.parse_args()
        logit.execute(vars(args),src=source)
        return vars(args)
    
    def parseTopics(self):
        source = "MQTT | TOPICS"
        excluded = None
        Topics = self.config['mqtt_topics'].split(',',5)
        topics = []
        count=0
        for topic in Topics:
            if 4 >= count:
                topics.append(topic)
            else:
                if 5 == count:
                    excluded = f"Topic Limit Exceeded. Excluded Topics: "
                excluded += f"'{topic}' "
        if excluded:
            logit.execute(f"Only 5 topics allowd.  Excluded Topics: {excluded}",src=source)
        return topics
    
    def setup(self):
        '''
        We have our possible config sources gathered and default values set in self.config
        Now we overwrite the defaults with the command line arguments.
        If there is not a command line argument, we fall back to the config file.
        Whatever is not set the default gets used.
        '''
        source = "MQTT | SETUP"
        for key in self.config:
            # If we set the command line argument, override the config file
            if self.Args[key]:
                self.config[key] = self.Args[key]
            elif self.configFile[key]:
                self.config[key] = self.configFile[key]
            if key == "mqtt_apikey":
                if self.config[key] and self.config[key] != "":
                    Key = True
                else:
                    Key = False
                value = Key
            elif self.config['ntfy_server'] == None:
                self.config['ntfy_server'] = 'https://ntfy.fevr.video'
            elif self.config['ntfy_topic'] == None:
                self.config['ntfy_topic']= 'fEVR'
            else:
                value = self.config[key]
            logit.execute(f"{key}: {value}", src=source)
        # Parse the topics into a list if it's a string.
        if isinstance(self.config['mqtt_topics'],str):
            self.config['mqtt_topics'] = self.parseTopics()
        
    def connect_mqtt(self) -> mqtt_client:
        def on_connect(client, userdata, flags, rc):
            source = "MQTT | CONNECT"
            if rc == 0:
                logit.execute(f"Connected to {self.config['mqtt_broker']}:{self.config['mqtt_port']} as {self.clientID}",src=source)
            else:
                logit.execute("Failed to connect, return code %d", rc,src=source)
        client = mqtt_client.Client(self.clientID)
        if self.config['mqtt_user'] and self.config['mqtt_password']:
            client.username_pw_set(self.config['mqtt_user'], self.config['mqtt_password'])
        client.on_connect = on_connect
        client.connect(self.config['mqtt_broker'], self.config['mqtt_port'])
        return client
    def processMsg(self,msg,topic):
        '''
        If we receive a message from the server we check if it matches our watched topics
        If it does, we respond
        '''
        if 'available' in topic:
            source = "MQTT | status"
        # If frigate says its available, we output to the logs
            logit.execute('frigate is online',src=source)
        elif 'event' in topic:
            source = "MQTT | EVENT"
            # If it's an event we take action
            event = loads(msg)
            eventfound = f"\n{json.dumps(event)}" if self.config['verbose'] else event["after"]["id"]
            if self.config['verbose']:
                logit.execute(f"{eventfound} ({event['type']})", src="MQTT | EVENT")
            elif event['type'] == "new":
                logit.execute(f"{eventfound} ({event['type']})", src="MQTT | EVENT")
                notifier = ntfy()
                notifier.server = self.config['ntfy_server']
                notifier.payload['topic'] = self.config['ntfy_topic']
                notifier.payload['message'] = f"{event['before']['label'].title()} in {event['before']['camera'].title()}"
                notifier.payload['title'] = "fEVR | Jeandr"
                notifier.payload['attach'] = f"http://192.168.2.240:5090/static/events/{event['before']['id']}/snapshot.jpg"
                notifier.payload['actions'].append({"action": "view", "label": "View Event", "url": f"http://192.168.2.240:5090/event/{event['before']['id']}/snap"})
                notifier.payload['priority'] = 5
                notifier.notify()
            elif event['type'] == "end": 
                logit.execute(f"{eventfound} ({event['type']})", src="MQTT | EVENT")
                notifier = ntfy()
                notifier.server = self.config['ntfy_server']
                notifier.payload['topic'] = self.config['ntfy_topic']
                notifier.payload['message'] = f"{event['after']['label'].title()} in {event['after']['camera'].title()}"
                notifier.payload['title'] = "fEVR | Jeandr"
                notifier.payload['attach'] = f"http://192.168.2.240:5090/static/events/{event['after']['id']}/snapshot.jpg"
                notifier.payload['actions'].append({"action": "view", "label": "View Event", "url": f"http://192.168.2.240:5090/event/{event['after']['id']}/snap"})
                notifier.payload['priority'] = 5
                notifier.notify()
                    
            if event['type'] == 'end':
                # If the event is over, we create a session variable, authenticate, and tell fEVR via it's API to get the event.
                rSession = requests.Session()
                Auth = auth(transport=self.config['fevr_transport'],apikey=self.config['mqtt_apikey'],fevr=self.config['fevr'],rSession=rSession)
                if Auth.api():
                    fEVRuri = f"{self.config['fevr_transport']}{self.config['fevr']}"
                    fEVRurl = f"{fEVRuri}/api/events/add/{event['after']['id']}/{event['after']['camera']}/{event['after']['label']}/{floor(float(event['after']['score'])*100)}"
                    addEventResponse = rSession.get(fEVRurl)
                    respJSON = json.loads(addEventResponse.content)
                    if self.config['verbose']:
                        logit.execute(fEVRurl,src=source)
                    if respJSON["error"] == 0:
                        LogMsg = f"SUCCESS: {event['after']['id']} ({event['after']['label']} in {event['after']['camera']}) added"
                    else: 
                        LogMsg = f"FAILURE: {respJSON}"
                    logit.execute(LogMsg,src="MQTT | EVENT ADD")
                else:
                    if fEVRurl:
                        logit.execute(f"Failed to Authenticate - visit {fEVRurl}/profile to generate an API Auth Key and insert it in your config", src="MQTT | ERROR")
                    else:
                        logit.execute(f"It appears your instance of fEVR is not setup yet.  please visit `/setup` to complete setup.", src="MQTT | ERROR")
                
    def subscribe(self, client: mqtt_client):
        def on_message(client, userdata, msg):
            source = "MQTT | RCVD"
            ## This is where our code goes to do what we want when a message is received
            if self.config['verbose']:
                logit.execute(f"{msg.topic}: Message Received",src=source)
            self.processMsg(msg.payload.decode(),msg.topic)
        for topic in self.config['mqtt_topics']:
            source = "MQTT | SUBSCRIBE"
            logit.execute(f"Subscribing to: {topic}",src=source)
            client.subscribe(topic)
        client.on_message = on_message
    def run(self):
        self.client = self.connect_mqtt()
        self.subscribe(self.client)
        self.client.loop_forever()
if __name__ == '__main__':
    fevrMQTT()